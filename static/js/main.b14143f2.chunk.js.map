{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["getExtensionMarkdown","extensionName","extension","version","assets","template","console","log","Mustache","render","toFixed","num","parseFloat","toLocaleString","App","useState","extListString","setExtListString","resultMarkdown","setResultMarkdown","setTemplate","useEffect","extensions","split","a","Promise","all","map","ext","length","atIndex","indexOf","extName","slice","extVersion","headers","body","JSON","stringify","filters","criteria","filterType","value","flags","resolve","reject","fetch","method","then","res","json","results","versions","idx","files","forEach","f","assetName","assetType","replaceAll","source","md","displayName","toLowerCase","result","markdown","sort","b","join","className","rows","cols","onChange","event","preventDefault","target","readOnly","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b14143f2.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Mustache from 'mustache';\n\nconst defaultTemplate = \n`### [{{extension.displayName}}](https://marketplace.visualstudio.com/items?itemName={{extensionName}}) {{version.version}}\n\n<table>\n  <tbody>\n    <tr>\n      <td rowspan=\"2\" style=\"width:74px;height:74px;padding:2px\"> <img style=\"width:72px;height:72px\" src=\"{{#assets.Microsoft_VisualStudio_Services_Icons_Small}}{{& assets.Microsoft_VisualStudio_Services_Icons_Small}}{{/assets.Microsoft_VisualStudio_Services_Icons_Small}}{{^assets.Microsoft_VisualStudio_Services_Icons_Small}}https://cdn.vsassets.io/v/M176_20201014.2/_content/Header/default_icon.png{{/assets.Microsoft_VisualStudio_Services_Icons_Small}}\"></td>\n      <td>{{extensionName}} By: {{extension.publisher.displayName}} Install: {{#toLocaleString}}{{extension.statistics.0.value}}{{/toLocaleString}} Rate: {{#toFixed}}{{extension.statistics.7.value}}{{/toFixed}}</td>\n    </tr>\n    <tr>\n      <td>{{extension.shortDescription}}</td>\n    </tr>\n  </tbody>\n</table>\n\n何か一言：\n`;\n\n\nfunction getExtensionMarkdown(extensionName: string, extension: any, version: any, assets: any, template: string) {\n  console.log({ extensionName, extension, version, assets }, assets['Microsoft_VisualStudio_Services_Icons_Small'])\n  return Mustache.render(template, {\n     extension, version, assets, extensionName,\n     toFixed: function() {\n      return function(num: number, render: any) {\n          return parseFloat(render(num)).toFixed(1);\n      }\n    },\n    toLocaleString: function() {\n      return function(num: number, render: any) {\n          return parseFloat(render(num)).toLocaleString();\n      }\n    }\n});\n}\n\nfunction App() {\n  const [extListString, setExtListString] = useState(\"\");\n  const [resultMarkdown, setResultMarkdown] = useState(\"\");\n  \n  const [template, setTemplate] = useState(defaultTemplate);\n\n  useEffect(() => {\n    const extensions = extListString.split(/\\n/);\n    console.log(\"Extensions\", extensions);\n    (async () => {\n      const result = await Promise.all(extensions.map(async(ext: string) => {\n        if (ext.length > 0) {\n          const atIndex = ext.indexOf(\"@\");\n          const extName = ext.slice(0, atIndex);\n          const extVersion = atIndex > -1 ? ext.slice(atIndex + 1, -1) : \"latest\";\n          console.log(`${ext} not found`);\n          // marcketplace API: https://www.slideshare.net/cssho/extensionapi\n          const queryEndPoint = \"https://marketplace.visualstudio.com/_apis/public/gallery/extensionquery\";\n          const method = \"POST\";\n          const headers = {\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json;api-version=3.0-preview.1\"\n          }\n          const body = JSON.stringify({\n            filters: [{\n              criteria: [\n                {\n                  filterType: 7,\n                  value: extName\n                },\n                {\n                  filterType: 8,\n                  value: \"Microsoft.VisualStudio.Code\"\n                }\n              ]\n            }],\n            flags: 0x01 | 0x02 | 0x04 | 0x08 | 0x10 | 0x20 | 0x40 | 0x80 | 0x100\n          });\n          return new Promise((resolve, reject) => (async () =>{\n            await fetch(queryEndPoint, { method, body, headers })\n            .then((res: Response) => res.json())\n            .then((res: any) => {\n              if (res.results.length > 0 && res.results[0].extensions.length > 0) {\n                const extension = res.results[0].extensions[0] as any;\n                const versions = extension.versions;\n                let version = versions[0];\n                console.log(\"ext\", extension, \"ver\", version);\n                for (let idx = 0; idx < versions.length; ++idx) {\n                  if (versions[idx].version === extVersion) {\n                    version = versions[idx];\n                    break;\n                  }\n                }\n                let assets: any = {};\n                version.files.forEach((f: any) => {\n                  const assetName = f.assetType.replaceAll('.', '_');\n                  assets[assetName] = f.source;\n                })\n                const md = getExtensionMarkdown(extName, extension, version, assets, template);\n                console.log(ext, md);\n                resolve([extension.displayName.toLowerCase(), md]);\n              }\n            });\n          })());\n        }\n      }));\n      const markdown = \"## @yourname\\n\\n<details><summary>見る</summary>\" + result.sort((a:any, b:any) => {\n        if (a[0] < b[0]) return -1;\n        if (a[0] > b[0]) return 1;\n        return 0;\n      }).map((a:any)=> a ? a[1] : \"\").join(\"\\n\") + \"</details>\";\n      setResultMarkdown(markdown)\n    })();\n  }, [extListString, template]);\n\n  const handleChangeExtList = (event: React.FormEvent) => {\n    event.preventDefault();\n    setExtListString((event.target as any).value);\n  }\n\n  const handleChangeTemplate = (event: React.FormEvent) => {\n    event.preventDefault();\n    setTemplate((event.target as any).value);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"Apsp-header\">\n        <table>\n          <tbody>\n            <tr>\n              <td><span>Command: </span></td>\n              <td><span className=\"code\">code --list-extensions --show-versions</span></td>\n            </tr>\n            <tr>\n              <td><label>paste ext list</label></td>\n              <td><textarea rows={10} cols={120} value={extListString} onChange={handleChangeExtList}></textarea></td>\n            </tr>\n            <tr>\n              <td><label>Template</label></td>\n              <td><textarea rows={10} cols={120} value={template} onChange={handleChangeTemplate}></textarea></td>\n            </tr>\n            <tr>\n              <td><label>Result</label></td>\n              <td><textarea rows={30} cols={120} value={resultMarkdown} readOnly={true}></textarea></td>\n            </tr>\n          </tbody>\n        </table>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}